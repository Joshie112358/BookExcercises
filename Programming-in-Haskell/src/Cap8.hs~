module Cap8 where

-- Ejercicio 1
data Nat = Zero | Succ Nat

nat2int :: Nat -> Int
nat2int Zero = 0
nat2int (Succ n) = 1 + nat2int n

int2nat :: Int -> Nat
int2nat 0 = Zero
int2nat n = Succ (int2nat (n-1))

add :: Nat -> Nat -> Nat
add Zero n = n
add (Succ m) n = Succ (add m n)

mult :: Nat -> Nat -> Nat
mult n (Succ Zero) = n
mult n (Succ m) = n `add` (mult n m)


-- Ejercicio 2
data Tree a = Leaf a | Node (Tree a) a (Tree a)

occurs :: Ord a => a -> Tree a -> Bool
occurs x (Leaf y) = x == y
occurs x (Node l y r) | x == y = True
                      | x < y = occurs x l
                      | otherwise = occurs x r

occurs2 :: Ord a => a -> Tree a -> Bool
occurs2 x (Leaf y) = x == y
occurs2 x (Node l y r) |d == EQ = True
                       |d == LT = occurs x l
                       |d == GT = occurs x r
                       where
                         d = compare x y

t :: Tree Int
t = Node (Node (Leaf 1) 3 (Leaf 4)) 5 (Node (Leaf 6) 7 (Leaf 9))

-- Es mas rapido ya que el valor de d solo se calcula una vez y no tiene que hacer 1-2 calculos como la otra version


-- Ejercicio 3
data Tree2 a = Leaf2 a | Node2 (Tree2 a) (Tree2 a)


t2 :: Tree2 Int
t2 = Node2 (Node2 (Leaf2 1)  (Leaf2 4))  (Node2 (Leaf2 6)  (Leaf2 9))

t3 :: Tree2 Int
t3 = Node2 (Node2 (Node2 (Node2 (Leaf2 0) (Leaf2 1)) (Leaf2 2) )  (Leaf2 4))  (Node2 (Leaf2 6) (Leaf2 9))

numLeaves :: Tree2 a -> Int
numLeaves (Leaf2 y) = 1
numLeaves (Node2 l r) = numLeaves l + numLeaves r


balanced :: Tree2 a -> Bool
balanced (Leaf2 _) = True
balanced (Node2 l r) = if abs(numLeaves l - numLeaves r) > 1 then False else (balanced l) && (balanced r)

-- Ejercicio 4
halve2 :: [a] -> ([a], [a])
halve2 x |(length x) `mod` 2 == 0  = (take ((length x) `div` 2) x, drop ((length x) `div` 2) x )
          |(length x) `mod` 2 == 1  = (take ((length (x) - 1) `div` 2) x, drop ((length (x) - 1) `div` 2) x )

balance :: [a] -> Tree2 a
balance [x] = (Leaf2 x)
balance x = Node2 (balance( fst (halve2 x))) (balance (snd (halve2 x )))


-- Ejercicio 5
data Expr = Val Int | Add Expr Expr

folde :: (Int -> a) -> (a -> a -> a) -> Expr -> a
folde f g (Val n) = f n
folde f g (Add x y) = g (folde f g x) (folde f g y)

--folde (*2) (+) (Add (Add (Val 2) (Val 3)) (Val 4))
--18
--folde (*2) (*) (Add (Add (Val 2) (Val 3)) (Val 4))
--192


-- Ejercicio 6
eval :: Expr -> Int
eval x = folde id (+) x

size :: Expr -> Int
size x = folde (\_ -> 1) (+) x


-- Ejercicio 7
--instance Eq a => Eq (Maybe a) where


--data Maybe a = Nothing | Just a


-- Ejercicio 8
data Prop = Const Bool
          | Var Char
          | Not Prop
          | And Prop Prop
          | Imply Prop Prop
          | Or Prop Prop
          | Equi Prop Prop

type Assoc k v = [(k,v)]
type Subst = Assoc Char Bool


eval2 :: Subst -> Prop -> Prop
eval2 _ (Const b) = b
eval2 s (Var x) = find x s
eval2 s (Not p) = not (eval s p)
eval2 s (And p q) = eval s p && eval s q
eval2 s (Imply p q) = eval s p <= eval s q
eval2 s (Or p q) = eval s p || eval s q
eval2 s (Equi p q) = (Imply p q) && (Imply q p)
